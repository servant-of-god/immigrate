// Generated by CoffeeScript 1.9.3
var Promise, executeMigrations, fillInDefaultOptions, findFile, findPackageJsonFile, findSetupFile, fs, getBaseDirectory, getSortedMigrationFiles, normalizeOptions, path, readJsonFile, semver, writeImmigrateJsonFile;

semver = require('semver');

Promise = require('promise');

fs = require('fs');

path = require('path');

readJsonFile = function(fileName) {
  return JSON.parse(fs.readFileSync(fileName));
};

module.exports = function(options) {
  if (options == null) {
    options = {};
  }
  return new Promise(function(resolve, reject) {
    var isFresh, migrationFiles, setupFile, state;
    options = normalizeOptions(options);
    try {
      state = readJsonFile(options.immigrateJsonFile);
      isFresh = false;
    } catch (_error) {
      state = {
        version: '0.0.0'
      };
      isFresh = true;
    }
    migrationFiles = getSortedMigrationFiles(options, state);
    if (isFresh && !options.migrateIfFresh) {
      migrationFiles = [];
    }
    if (isFresh) {
      setupFile = findSetupFile(options);
      if (setupFile) {
        migrationFiles.unshift(setupFile);
      }
    }
    return executeMigrations(options, migrationFiles).then(function() {
      state.version = options.currentVersion;
      writeImmigrateJsonFile(options.immigrateJsonFile, state);
      return resolve(state);
    });
  });
};

writeImmigrateJsonFile = function(fileName, state) {
  var stateJson;
  stateJson = JSON.stringify(state, null, 2);
  return fs.writeFileSync(fileName, stateJson);
};

normalizeOptions = function(options) {
  var baseDirectory;
  fillInDefaultOptions(options);
  options.packageJsonFile = findPackageJsonFile(options.packageJsonFile);
  if (!options.currentVersion && !options.packageJsonFile) {
    throw new Error("Could not find package.json. Please provide either a valid packageJsonFile or currentVersion option parameter.");
  } else if (!options.currentVersion) {
    options.currentVersion = require(options.packageJsonFile).version;
  }
  baseDirectory = getBaseDirectory(options.packageJsonFile);
  if (!path.isAbsolute(options.immigrateJsonFile)) {
    try {
      options.immigrateJsonFile = findFile(baseDirectory, options.immigrateJsonFile);
    } catch (_error) {
      options.immigrateJsonFile = path.join(baseDirectory, options.immigrateJsonFile);
    }
  }
  try {
    options.migrationsDirectory = findFile(baseDirectory, options.migrationsDirectory);
  } catch (_error) {
    throw new Error("Could not find migrationsDirectory (" + options.migrationsDirectory + ")");
  }
  return options;
};

findPackageJsonFile = function(packageJsonFile) {
  var currentDirectory, currentPackageJsonFile, i, j, ref, searchParentDirectoryCount;
  if (packageJsonFile) {
    packageJsonFile = path.resolve(packageJsonFile);
    if (!fs.existsSync(packageJsonFile)) {
      throw new Error('Could not find the supplied package.json file. Leave option blank for auto-detection.');
    }
    return packageJsonFile;
  }
  currentDirectory = path.dirname(module.parent.filename);
  searchParentDirectoryCount = 4;
  for (i = j = 1, ref = searchParentDirectoryCount; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
    currentPackageJsonFile = path.join(currentDirectory, 'package.json');
    if (fs.existsSync(currentPackageJsonFile)) {
      return currentPackageJsonFile;
    }
    currentDirectory = path.join(currentDirectory, '../');
  }
  return null;
};

findFile = function(baseDirectory, fileName) {
  if (fs.existsSync(fileName)) {
    return path.resolve(fileName);
  } else if (fs.existsSync(path.join(baseDirectory, fileName))) {
    return path.join(baseDirectory, fileName);
  }
  throw new Error("Could not find file " + fileName);
};

fillInDefaultOptions = function(options) {
  if (options.currentVersion == null) {
    options.currentVersion = null;
  }
  if (options.packageJsonFile == null) {
    options.packageJsonFile = null;
  }
  if (options.migrationsDirectory == null) {
    options.migrationsDirectory = "./migrations/";
  }
  if (options.immigrateJsonFile == null) {
    options.immigrateJsonFile = "./immigrate.json";
  }
  if (options.migrateIfFresh == null) {
    options.migrateIfFresh = false;
  }
  return options.context != null ? options.context : options.context = null;
};

getBaseDirectory = function(packageJsonFile) {
  if (packageJsonFile) {
    return path.dirname(packageJsonFile);
  } else {
    return process.cwd();
  }
};

getSortedMigrationFiles = function(options, state) {
  var fileName, fileNameWithoutExtension, filePath, files, j, len, ref;
  files = [];
  ref = fs.readdirSync(options.migrationsDirectory);
  for (j = 0, len = ref.length; j < len; j++) {
    fileName = ref[j];
    fileNameWithoutExtension = fileName.split('.').slice(0, -1).join('.');
    if (!semver.valid(fileNameWithoutExtension)) {
      continue;
    }
    filePath = path.join(options.migrationsDirectory, fileName);
    files.push({
      fileName: filePath,
      version: semver.clean(fileNameWithoutExtension)
    });
  }
  if (state.version) {
    files = files.filter(function(file) {
      return semver.gt(file.version, state.version);
    });
  }
  files = files.filter(function(file) {
    return !semver.gt(file.version, options.currentVersion);
  });
  files = files.sort(function(fileLeft, fileRight) {
    if (semver.gt(fileLeft.version, fileRight.version)) {
      return 1;
    }
    if (semver.lt(fileLeft.version, fileRight.version)) {
      return -1;
    }
    return 0;
  });
  return files;
};

findSetupFile = function(options) {
  var fileName, fileNameWithoutExtension, filePath, j, len, ref;
  ref = fs.readdirSync(options.migrationsDirectory);
  for (j = 0, len = ref.length; j < len; j++) {
    fileName = ref[j];
    fileNameWithoutExtension = fileName.split('.').slice(0, -1).join('.');
    if (fileNameWithoutExtension === "setup") {
      filePath = path.join(options.migrationsDirectory, fileName);
      return {
        fileName: filePath,
        version: options.currentVersion
      };
    }
  }
};

executeMigrations = function(options, migrationFiles) {
  var executeNextMigration;
  executeNextMigration = function() {
    var file, migration;
    if (!migrationFiles.length) {
      return Promise.resolve();
    }
    file = migrationFiles.shift();
    migration = require(file.fileName);
    if (typeof migration === "function") {
      migration = migration.call(options.context, options.context);
    }
    if (typeof (migration != null ? migration.then : void 0) === "function") {
      return migration.then(function() {
        return executeNextMigration();
      });
    } else {
      return executeNextMigration();
    }
  };
  return executeNextMigration();
};
